{
  "name": "Detect Collisions",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -760,
        1100
      ]
    },
    {
      "parameters": {
        "topics": "evam/itm",
        "options": {}
      },
      "name": "MQTT Trigger",
      "type": "n8n-nodes-base.mqttTrigger",
      "typeVersion": 1,
      "position": [
        -640,
        300
      ],
      "credentials": {
        "mqtt": {
          "id": "2",
          "name": "MQTT account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json[\"collision_count\"]}}",
              "operation": "largerEqual",
              "value2": 1
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -40,
        300
      ]
    },
    {
      "parameters": {
        "message": "EMERGENCY ALERT : A vehicle collision occurred.",
        "additionalFields": {}
      },
      "name": "SIGNL4",
      "type": "n8n-nodes-base.signl4",
      "typeVersion": 1,
      "position": [
        240,
        180
      ],
      "credentials": {
        "signl4Api": {
          "id": "3",
          "name": "SIGNL4 Webhook account"
        }
      }
    },
    {
      "parameters": {
        "functionCodeCustom": "let res = [];\nconst getBboxes = (data) => {\n    let arrBbox = [];\n    const extractBoxes = (vehicle) => {\n        arrBbox.push(vehicle.detection.bounding_box)\n    }\n    data.objects.forEach(extractBoxes);\n    return arrBbox;\n}\n\nconst getDistance = (pointA, pointB) => {\n    return Math.sqrt(Math.pow(pointB.x - pointA.x, 2) + (Math.pow(pointB.y - pointA.y, 2)))\n}\n\nconst getDistanceMatrix = (centroidA, centroidB) => {\n    let distances = [];\n    for (const pointA of centroidA) {\n        let row = [];\n        for (const pointB of centroidB) {\n            row.push(getDistance (pointA, pointB))\n        }\n        distances.push(row);\n    }\n    return distances;\n}\n\nfor (item of items) {\n  const data = JSON.parse(item.json.message);\n  const bbox = getBboxes(data);\n\n  let widths = [];\n  let centroids = [];\n  for ( const elem of bbox ) {\n    widths.push (Math.min(elem.x_max - elem.x_min, elem.y_max - elem.y_min));\n    centroids.push({ x : elem.x_min + (elem.x_max - elem.x_min)/2 , y : elem.y_min + (elem.y_max - elem.y_min)/2 });\n  }\n\n  const distance = getDistanceMatrix(centroids, centroids);\n\n  const count = centroids.length; \n  let collisions = [];\n  for (let i = 0; i < count; i++) {\n    for (let j = i + 1; j < count; j++) {\n        smallerWidth = Math.min(widths[i], widths[j]);\n        if (distance[i][j] < smallerWidth) {\n            collisions.push([i, j]); \n        }\n    }\n  }\n\n  res.push( {json: {vehicle_count: count, collision_count: collisions.length}} );\n  console.log(res);\n}\n\nreturn res;"
      },
      "name": "Detect Collision",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -320,
        300
      ]
    }
  ],
  "connections": {
    "MQTT Trigger": {
      "main": [
        [
          {
            "node": "Detect Collision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "SIGNL4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Collision": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": 8
}